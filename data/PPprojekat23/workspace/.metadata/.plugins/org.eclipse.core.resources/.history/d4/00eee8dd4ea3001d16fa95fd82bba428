package rs.ac.bg.etf.pp1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;

import java_cup.runtime.Symbol;

import org.apache.log4j.Logger;
import org.apache.log4j.xml.DOMConfigurator;

import rs.ac.bg.etf.pp1.ast.Program;
import rs.ac.bg.etf.pp1.util.Log4JUtils;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Scope;
import rs.etf.pp1.symboltable.concepts.Struct;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;
import rs.etf.pp1.symboltable.visitors.SymbolTableVisitor;

public class MJParserTest {

	static {
		DOMConfigurator.configure(Log4JUtils.instance().findLoggerConfigFile());
		Log4JUtils.instance().prepareLogFile(Logger.getRootLogger());
	}
	
	public static void main(String[] args) throws Exception {
		
		Logger log = Logger.getLogger(MJParserTest.class);
		
		Reader br = null;
		try {
			File sourceCode = new File("test/program9.mj");
			log.info("Compiling source file: " + sourceCode.getAbsolutePath());
			
			br = new BufferedReader(new FileReader(sourceCode));
			Yylex lexer = new Yylex(br);
			
			//ako smo naisli na leksicku gresku
			if(lexer.lexErrorDetected) return;
			
			MJParser p = new MJParser(lexer);
	        Symbol s = p.parse();  //pocetak parsiranja
	        
	        Program prog = (Program)(s.value); 
//	        Tab.init();
			// ispis sintaksnog stabla
			log.info(prog.toString(""));
			log.info("===================================");

			// ispis prepoznatih programskih konstrukcija
//			SemanticPass sm = new SemanticPass();
//			prog.traverseBottomUp(sm);
//			log.info(" Print count calls = " + sm.printCallCount);
//			
//			log.info("Declared variables = " + sm.varDeclCount);
//			
//			log.info("===================================");
//			Tab.dump();
			
//			if(!p.errorDetected && sm.passed()) {
//				File objFile = new File("test/program.obj");
//				if(objFile.exists()) objFile.delete();
//				
//				CodeGen cg = new CodeGen();
//				prog.traverseBottomUp(cg);
//				//Generisanje koda
//				Code.dataSize = sm.nVars;
//				Code.mainPc = cg.getMainPc();
//				Code.write(new FileOutputStream(objFile));
//				log.info("Parsiranje uspesno zavrseno!");
//			} else {
//				log.info("Parsiranje nije uspesno zavrseno!");
//			}
			
			//Semanticka analiza
			//proveri da li su sem i sin analiza bez gresaka
			Tab.init();
			Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", new Struct(Struct.Bool)));
			SemanticAnalyzer sa = new SemanticAnalyzer();
			prog.traverseBottomUp(sa);
			log.info("===================================");
			Tab.dump();
//		dump(new MyDumpSymbolTableVisitor());
			
			File objFile = new File("test/program.obj");
			if(objFile.exists()) objFile.delete();
			CodeGenerator cg = new CodeGenerator();
			prog.traverseBottomUp(cg);
			//GENERISANJE KODA
			Code.dataSize = sa.nVars;
			Code.mainPc = cg.getMainPc();
			Code.write(new FileOutputStream(objFile));
			//poruka o (ne)uspesnom parsiranju
			
			
		} 
		finally {
			if (br != null) try { br.close(); } catch (IOException e1) { log.error(e1.getMessage(), e1); }
		}

	}
	
	public static void dump(SymbolTableVisitor stv) {
		System.out.println("=====================SYMBOL TABLE DUMP=========================");
		if (stv == null)
			stv = new DumpSymbolTableVisitor();
		for (Scope s = Tab.currentScope; s != null; s = s.getOuter()) {
			s.accept(stv);
		}
		System.out.println(stv.getOutput());
	}
	
}
